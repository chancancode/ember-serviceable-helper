{"version":3,"file":"manager-13Gnqjvl.js","sources":["../src/injection.ts","../src/manager.ts"],"sourcesContent":["import { assert } from '@ember/debug';\nimport { isDestroying, isDestroyed } from '@ember/destroyable';\nimport { macroCondition, isDevelopingApp } from '@embroider/macros';\n\nimport type {\n  AnyFunction,\n  AnyInjectableConstructor,\n  InjectableConstructor,\n} from './types.ts';\n\nconst STORAGE = new WeakMap<\n  AnyInjectableConstructor<object>,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Storage<any, AnyFunction, object>\n>();\n\nconst INJECTABLE = Symbol('INJECTABLE');\n\nexport function isInjectable(\n  fn: AnyFunction,\n): fn is AnyInjectableConstructor<object> {\n  return (fn as { [INJECTABLE]?: true })[INJECTABLE] === true;\n}\n\nexport type GetInjections<Injections, Owner extends object> = (\n  owner: Owner,\n) => Injections;\n\nexport type GetInjected<Injections, F extends AnyFunction> = (\n  injections: Injections,\n) => F;\n\nexport type GetOwner<Owner> = (object: object) => Owner | undefined;\n\nexport function constructorFor<\n  Injections,\n  Injected extends AnyFunction,\n  Owner extends object,\n>(\n  getInjections: GetInjections<Injections, Owner>,\n  getInjected: GetInjected<Injections, Injected>,\n  getOwner: (context: object) => Owner | undefined,\n  name?: string,\n): InjectableConstructor<Injected, Owner> {\n  const storage = new Storage(getInjections, getInjected);\n  const constructor = makeConstructor(storage, getOwner, name);\n\n  STORAGE.set(\n    constructor as InjectableConstructor<Injected, object>,\n    storage as Storage<Injections, Injected, object>,\n  );\n\n  (constructor as { [INJECTABLE]?: true })[INJECTABLE] = true;\n\n  return constructor;\n}\n\nfunction makeConstructor<\n  Injections,\n  Injected extends AnyFunction,\n  Owner extends object,\n>(\n  storage: Storage<Injections, Injected, Owner>,\n  getOwner: GetOwner<Owner>,\n  name?: string,\n): InjectableConstructor<Injected, Owner> {\n  if (macroCondition(isDevelopingApp())) {\n    if (name) {\n      // trick to set function.name\n      const obj = {\n        [name]: function (this: object | void, ...args) {\n          if (new.target) {\n            return storage.getInjected(args[0]);\n          } else {\n            assert(\n              `cannot call ${name} without a context object; it must be called with a \\`this\\` object with an owner`,\n              this !== null && typeof this === 'object',\n            );\n\n            const owner = getOwner(this);\n\n            assert(\n              `cannot call ${name} with an invalid context object; it must be called with a \\`this\\` object with an owner`,\n              owner,\n            );\n\n            return storage.getInjected(owner)(...args);\n          }\n        } as InjectableConstructor<Injected, Owner>,\n      };\n\n      return obj[name]!;\n    }\n  }\n\n  return function (this: object, ...args) {\n    if (new.target) {\n      return storage.getInjected(args[0]);\n    } else {\n      const owner = getOwner(this);\n      return storage.getInjected(owner!)(...args);\n    }\n  } as InjectableConstructor<Injected, Owner>;\n}\n\nclass Storage<Injections, Injected extends AnyFunction, Owner extends object> {\n  #getInjections: GetInjections<Injections, Owner>;\n  #getInjected: GetInjected<Injections, Injected>;\n  #name: string;\n\n  #injected = new WeakMap<Owner, Injected>();\n  #injections = new WeakMap<Owner, Injections>();\n\n  constructor(\n    getInjections: GetInjections<Injections, Owner>,\n    getInjected: GetInjected<Injections, Injected>,\n    name = '(unknown function)',\n  ) {\n    this.#getInjections = getInjections;\n    this.#getInjected = getInjected;\n    this.#name = name;\n  }\n\n  getInjections(owner: Owner): Injections {\n    assert(\n      `cannot call ${this.#name} while the owner is being destroyed`,\n      !isDestroying(owner),\n    );\n    assert(\n      `cannot call ${this.#name} after the owner has already been destroyed`,\n      !isDestroyed(owner),\n    );\n\n    let injections = this.#injections.get(owner);\n\n    if (!injections) {\n      this.#injections.set(owner, (injections = this.#getInjections(owner)));\n    }\n\n    return injections!;\n  }\n\n  getInjected(owner: Owner): Injected {\n    assert(\n      `cannot call ${this.#name} while the owner is being destroyed`,\n      !isDestroying(owner),\n    );\n    assert(\n      `cannot call ${this.#name} after the owner has already been destroyed`,\n      !isDestroyed(owner),\n    );\n\n    let injected = this.#injected.get(owner);\n\n    if (!injected) {\n      const injections = this.getInjections(owner);\n      this.#injected.set(owner, (injected = this.#getInjected(injections)));\n    }\n\n    return injected!;\n  }\n}\n","import { assert } from '@ember/debug';\nimport { capabilities, setHelperManager } from '@ember/helper';\nimport type { Arguments, HelperManager } from '@ember/helper';\nimport type Owner from '@ember/owner';\n\nimport type { AnyFunction, AnyInjectableConstructor } from './types.ts';\nimport { isInjectable } from './injection.ts';\n\ninterface State {\n  fn: AnyFunction;\n  args: Arguments;\n}\n\nclass InstantiableHelperManager\n  implements HelperManager<AnyInjectableConstructor<Owner>, State>\n{\n  readonly capabilities = capabilities('3.23', { hasValue: true });\n\n  constructor(private owner: Owner) {}\n\n  createHelper(constructor: AnyInjectableConstructor, args: Arguments): State {\n    assert('must be an injectable constructor', isInjectable(constructor));\n    return { fn: new constructor(this.owner), args };\n  }\n\n  getValue({ fn, args }: State): unknown {\n    if (Object.keys(args.named).length > 0) {\n      return fn(...args.positional, args.named);\n    } else {\n      return fn(...args.positional);\n    }\n  }\n\n  getDebugName(fn: AnyInjectableConstructor): string {\n    return fn.name;\n  }\n}\n\nfunction factory(owner: Owner): InstantiableHelperManager {\n  return new InstantiableHelperManager(owner);\n}\n\nexport function helperFor<F extends AnyInjectableConstructor>(fn: F): F {\n  assert('must be an injectable constructor', isInjectable(fn));\n  return setHelperManager(factory, fn);\n}\n"],"names":["STORAGE","WeakMap","INJECTABLE","Symbol","isInjectable","fn","constructorFor","getInjections","getInjected","getOwner","name","storage","Storage","constructor","makeConstructor","set","macroCondition","isDevelopingApp","obj","args","new","target","assert","owner","isDestroying","isDestroyed","injections","get","injected","InstantiableHelperManager","capabilities","hasValue","createHelper","getValue","Object","keys","named","length","positional","getDebugName","factory","helperFor","setHelperManager"],"mappings":"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"}