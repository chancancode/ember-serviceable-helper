{"version":3,"file":"index.js","sources":["../src/builder.ts"],"sourcesContent":["import type Owner from '@ember/owner';\nimport { getOwner, setOwner } from '@ember/owner';\nimport type { Registry } from '@ember/service';\n\nimport type {\n  AnyFunction,\n  InjectableConstructor,\n  InjectableFunction,\n  Injected,\n} from './types.ts';\nimport { constructorFor } from './injection.ts';\nimport type { GetInjections } from './injection.ts';\nimport { helperFor } from './manager.ts';\n\ntype WithOwner = { owner: Owner };\n\ntype InjectOwner<Injections> = Inject<Injections & WithOwner>;\n\ntype WithService<K extends keyof Registry> = { [P in K]: Registry[K] };\n\ntype InjectService<Injections, K extends keyof Registry> = Inject<\n  Injections & WithService<K>\n>;\n\ntype WithProperty<K extends keyof object, V> = { [P in K]: V };\n\ntype InjectProperty<Injections, K extends keyof object, V> = Inject<\n  Injections & WithProperty<K, V>\n>;\n\nconst UNINITIALIZED = Symbol('UNINITIALIZED');\ntype UNINITIALIZED = typeof UNINITIALIZED;\n\n/**\n * A builder DSL to build the injections needed for a function\n */\nexport interface Inject<Injections> {\n  /**\n   * Inject the owner as `this.owner`\n   */\n  owner(): InjectOwner<Injections>;\n\n  /**\n   * Inject `service:${name}` as `this[name]`\n   *\n   * @param name name of the property and service\n   */\n  service<K extends keyof Registry>(name: K): InjectService<Injections, K>;\n\n  /**\n   * Inject `service:${serviceName}` as `this[propertyName]`\n   *\n   * @param propertyName name of the property\n   * @param serviceName name of the service\n   */\n  service<K1 extends keyof object, K2 extends keyof Registry>(\n    propertyName: K1,\n    serviceName: K2,\n  ): InjectProperty<Injections, K1, Registry[K2]>;\n\n  /**\n   * Inject an arbitrary property with a value determined by the callback\n   *\n   * @param name name of the property\n   * @param callback a callback returning the value of the injected property\n   */\n  property<K extends keyof object, V>(\n    name: K,\n    callback: (this: Injections, owner: Owner) => V,\n  ): InjectProperty<Injections, K, V>;\n\n  /**\n   * Finalize the injections, returning an instantiable version of the given\n   * function\n   *\n   * @param fn the function that should receive these injections\n   */\n  into<F extends InjectableFunction<Injections>>(\n    fn: F,\n  ): InjectableConstructor<Injected<F>>;\n\n  /**\n   * Finalize the injections with a callback that, given the injections,\n   * returns the instantiated function\n   */\n  build<F extends AnyFunction>(\n    callback: (injections: Injections) => F,\n  ): InjectableConstructor<F>;\n}\n\ntype DefineInjectedProperty = (owner: Owner, injections: object) => void;\n\nclass Builder<Injections> implements Inject<Injections> {\n  constructor(\n    private readonly properties: readonly DefineInjectedProperty[] = [],\n  ) {}\n\n  owner(): InjectOwner<Injections> {\n    return new Builder<Injections & WithOwner>([\n      ...this.properties,\n      (owner, injections) => {\n        Object.defineProperty(injections, 'owner', {\n          get(): Owner {\n            return owner;\n          },\n        });\n      },\n    ]);\n  }\n\n  service<K extends keyof Registry>(name: K): InjectService<Injections, K>;\n  service<K1 extends keyof object, K2 extends keyof Registry>(\n    propertyName: K1,\n    serviceName: K2,\n  ): InjectProperty<Injections, K1, Registry[K2]>;\n  service<K1 extends keyof object, K2 extends keyof Registry>(\n    propertyName: K1,\n    serviceName: K2 = propertyName,\n  ): InjectProperty<Injections, K1, Registry[K2]> {\n    return new Builder<Injections & WithProperty<K1, Registry[K2]>>([\n      ...this.properties,\n      (owner, injections) => {\n        let service: Registry[K2] | UNINITIALIZED = UNINITIALIZED;\n        Object.defineProperty(injections, propertyName, {\n          get(): Registry[K2] {\n            if (service === UNINITIALIZED) {\n              service = owner.lookup(`service:${serviceName}`);\n            }\n            return service;\n          },\n        });\n      },\n    ]);\n  }\n\n  property<K extends keyof object, V>(\n    name: K,\n    callback: (this: Injections, owner: Owner) => V,\n  ): InjectProperty<Injections, K, V> {\n    return new Builder<Injections & WithProperty<K, V>>([\n      ...this.properties,\n      (owner, injections) => {\n        let value: V | UNINITIALIZED = UNINITIALIZED;\n        Object.defineProperty(injections, name, {\n          get(): V {\n            if (value === UNINITIALIZED) {\n              value = callback.call(this, owner);\n            }\n            return value;\n          },\n        });\n      },\n    ]);\n  }\n\n  into<F extends InjectableFunction<Injections>>(\n    fn: F,\n  ): InjectableConstructor<Injected<F>> {\n    const getInjections = this.getInjections();\n    const getInjected = (injections: Injections) => fn.bind(injections);\n    return helperFor(\n      constructorFor(getInjections, getInjected, getOwner, fn.name),\n    );\n  }\n\n  build<F extends AnyFunction>(\n    getInjected: (injections: Injections) => F,\n  ): InjectableConstructor<F> {\n    const getInjections = this.getInjections();\n    return helperFor(\n      constructorFor(getInjections, getInjected, getOwner, getInjected.name),\n    );\n  }\n\n  private getInjections(): GetInjections<Injections, Owner> {\n    const { properties } = this;\n\n    return (owner) => {\n      const injections = {};\n\n      for (const defineProperty of properties) {\n        defineProperty(owner, injections);\n      }\n\n      setOwner(injections, owner);\n\n      return Object.freeze(injections) as Injections;\n    };\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport default new Builder() as Inject<{}>;\n"],"names":["UNINITIALIZED","Symbol","Builder","constructor","properties","owner","injections","Object","defineProperty","get","service","propertyName","serviceName","lookup","property","name","callback","value","call","into","fn","getInjections","getInjected","bind","helperFor","constructorFor","getOwner","build","setOwner","freeze"],"mappings":";;;AA8BA,MAAMA,aAAa,GAAGC,MAAM,CAAC,eAAe,CAAC,CAAA;;AAG7C;AACA;AACA;;AAyDA,MAAMC,OAAO,CAA2C;AACtDC,EAAAA,WAAWA,CACQC,UAA6C,GAAG,EAAE,EACnE;IAAA,IADiBA,CAAAA,UAA6C,GAA7CA,UAA6C,CAAA;AAC7D,GAAA;AAEHC,EAAAA,KAAKA,GAA4B;AAC/B,IAAA,OAAO,IAAIH,OAAO,CAAyB,CACzC,GAAG,IAAI,CAACE,UAAU,EAClB,CAACC,KAAK,EAAEC,UAAU,KAAK;AACrBC,MAAAA,MAAM,CAACC,cAAc,CAACF,UAAU,EAAE,OAAO,EAAE;AACzCG,QAAAA,GAAGA,GAAU;AACX,UAAA,OAAOJ,KAAK,CAAA;AACd,SAAA;AACF,OAAC,CAAC,CAAA;AACJ,KAAC,CACF,CAAC,CAAA;AACJ,GAAA;AAOAK,EAAAA,OAAOA,CACLC,YAAgB,EAChBC,WAAe,GAAGD,YAAY,EACgB;AAC9C,IAAA,OAAO,IAAIT,OAAO,CAA8C,CAC9D,GAAG,IAAI,CAACE,UAAU,EAClB,CAACC,KAAK,EAAEC,UAAU,KAAK;MACrB,IAAII,OAAqC,GAAGV,aAAa,CAAA;AACzDO,MAAAA,MAAM,CAACC,cAAc,CAACF,UAAU,EAAEK,YAAY,EAAE;AAC9CF,QAAAA,GAAGA,GAAiB;UAClB,IAAIC,OAAO,KAAKV,aAAa,EAAE;YAC7BU,OAAO,GAAGL,KAAK,CAACQ,MAAM,CAAE,CAAUD,QAAAA,EAAAA,WAAY,EAAC,CAAC,CAAA;AAClD,WAAA;AACA,UAAA,OAAOF,OAAO,CAAA;AAChB,SAAA;AACF,OAAC,CAAC,CAAA;AACJ,KAAC,CACF,CAAC,CAAA;AACJ,GAAA;AAEAI,EAAAA,QAAQA,CACNC,IAAO,EACPC,QAA+C,EACb;AAClC,IAAA,OAAO,IAAId,OAAO,CAAkC,CAClD,GAAG,IAAI,CAACE,UAAU,EAClB,CAACC,KAAK,EAAEC,UAAU,KAAK;MACrB,IAAIW,KAAwB,GAAGjB,aAAa,CAAA;AAC5CO,MAAAA,MAAM,CAACC,cAAc,CAACF,UAAU,EAAES,IAAI,EAAE;AACtCN,QAAAA,GAAGA,GAAM;UACP,IAAIQ,KAAK,KAAKjB,aAAa,EAAE;YAC3BiB,KAAK,GAAGD,QAAQ,CAACE,IAAI,CAAC,IAAI,EAAEb,KAAK,CAAC,CAAA;AACpC,WAAA;AACA,UAAA,OAAOY,KAAK,CAAA;AACd,SAAA;AACF,OAAC,CAAC,CAAA;AACJ,KAAC,CACF,CAAC,CAAA;AACJ,GAAA;EAEAE,IAAIA,CACFC,EAAK,EAC+B;AACpC,IAAA,MAAMC,aAAa,GAAG,IAAI,CAACA,aAAa,EAAE,CAAA;IAC1C,MAAMC,WAAW,GAAIhB,UAAsB,IAAKc,EAAE,CAACG,IAAI,CAACjB,UAAU,CAAC,CAAA;AACnE,IAAA,OAAOkB,SAAS,CACdC,cAAc,CAACJ,aAAa,EAAEC,WAAW,EAAEI,QAAQ,EAAEN,EAAE,CAACL,IAAI,CAC9D,CAAC,CAAA;AACH,GAAA;EAEAY,KAAKA,CACHL,WAA0C,EAChB;AAC1B,IAAA,MAAMD,aAAa,GAAG,IAAI,CAACA,aAAa,EAAE,CAAA;AAC1C,IAAA,OAAOG,SAAS,CACdC,cAAc,CAACJ,aAAa,EAAEC,WAAW,EAAEI,QAAQ,EAAEJ,WAAW,CAACP,IAAI,CACvE,CAAC,CAAA;AACH,GAAA;AAEQM,EAAAA,aAAaA,GAAqC;IACxD,MAAM;AAAEjB,MAAAA,UAAAA;AAAW,KAAC,GAAG,IAAI,CAAA;AAE3B,IAAA,OAAQC,KAAK,IAAK;MAChB,MAAMC,UAAU,GAAG,EAAE,CAAA;AAErB,MAAA,KAAK,MAAME,cAAc,IAAIJ,UAAU,EAAE;AACvCI,QAAAA,cAAc,CAACH,KAAK,EAAEC,UAAU,CAAC,CAAA;AACnC,OAAA;AAEAsB,MAAAA,QAAQ,CAACtB,UAAU,EAAED,KAAK,CAAC,CAAA;AAE3B,MAAA,OAAOE,MAAM,CAACsB,MAAM,CAACvB,UAAU,CAAC,CAAA;KACjC,CAAA;AACH,GAAA;AACF,CAAA;;AAEA;AACA,cAAe,IAAIJ,OAAO,EAAE;;;;"}